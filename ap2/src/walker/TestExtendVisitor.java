package walker;

import java.lang.NullPointerException;
import java.util.HashMap;
import java.util.Map;

import autogenerated.TestBaseVisitor;
import autogenerated.TestParser;

public class TestExtendVisitor extends TestBaseVisitor<Integer> {
	Map<String, Integer> simpleSymbolTable = new HashMap<String, Integer>( );
	int line = 0;
	
	@Override
	public Integer visitAssign(TestParser.AssignContext ctx) {
		//ID is the token at the left of the '='
		String id = ctx.ID( ).getText( ); 
		int value = ctx.expr( ).accept(this);
		
		if (value == Integer.MAX_VALUE) {
			System.out.println("Divisao por zero! Linha ignorada.");
			return value;
		}
		
		simpleSymbolTable.put(id, value);
		
		
		System.out.println(id + " = " + value);
		/*  
		 *  We can also get information about the individual tokens
		 *  Token token = (Token) ctx.ID( ).getPayload( );
		 *  int line = token.getLine( );
		 */

		return value;
	}

	@Override
	public Integer visitMultDiv(TestParser.MultDivContext ctx) {
		//Get value of left subexpression
		int left = ctx.expr(0).accept(this);
		
		//Get value of right subexpression
		int right = ctx.expr(1).accept(this);
		int result = 0;
		
		if (ctx.op.getType( ) == TestParser.MUL) {
			result = left * right;
		} else {
			try {
				result = left / right;
			} catch (ArithmeticException e) {
				result = Integer.MAX_VALUE;
			}
		}
		
		return result;
	}
	
	@Override
	public Integer visitAddSub(TestParser.AddSubContext ctx) {
		//Get value of left subexpression
		int left = ctx.expr(0).accept(this); 
		//Get value of right subexpression
		int right = ctx.expr(1).accept(this);  
		int result = 0;
		
		if(left == Integer.MAX_VALUE || right == Integer.MAX_VALUE) {
			return 0;
		}
		
		if (ctx.op.getType( ) == TestParser.ADD) {
			result = left + right;
		} else {
			result = left - right;
		}
		
		return result;
	}
	
	@Override
	public Integer visitInt(TestParser.IntContext ctx) {
		return Integer.valueOf(ctx.INT( ).getText( ));
	}
	
	@Override
	public Integer visitIdentifier(TestParser.IdentifierContext ctx) {
		String key = ctx.ID( ).getText( );
		int value = 0;
		try {
			value = simpleSymbolTable.get(key);
		} catch (NullPointerException e) {
			System.out.println("erro: variavel '" + key + "' nao foi declarada!");
		}
		
		return value;
	}
	
	@Override
	public Integer visitParen(TestParser.ParenContext ctx) {
		return ctx.expr().accept(this);
	}
	
	@Override
	protected Integer aggregateResult(Integer aggregate, Integer nextResult) {
		return (nextResult != null) ? nextResult : aggregate;
	}
	
}
